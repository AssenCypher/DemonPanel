#if UDONSHARP\nusing UdonSharp;\nusing UnityEngine;\nusing VRC.SDKBase;\nusing VRC.Udon;\n\npublic class AreaRuntimeToggle : UdonSharpBehaviour\n{\n    [Tooltip("Targets to enable while player is inside, disable when outside.")]\n    public GameObject[] targets;\n\n    [Tooltip("Start with targets disabled (recommended).")]\n    public bool startDisabled = true;\n\n    // 0=SetActive,1=Renderers.enabled,2=Light.enabled,3=AudioSource.enabled,4=ParticleSystem.Play/Stop\n    [Tooltip("0=SetActive, 1=Renderers, 2=Light, 3=Audio, 4=Particles")]\n    public int mode = 0;\n\n    [Tooltip("Debounce seconds to avoid rapid toggling.")]\n    public float debounce = 0.1f;\n\n    private float _nextAllowed = 0f;\n    private bool _inside = false;\n\n    void Start()\n    {\n        if (startDisabled) Apply(false);\n    }\n\n    public override void OnPlayerTriggerEnter(VRCPlayerApi player)\n    {\n        if (!Utilities.IsValid(player) || !player.isLocal) return;\n        if (Time.time < _nextAllowed) return;\n        _nextAllowed = Time.time + debounce;\n        _inside = true;\n        Apply(true);\n    }\n\n    public override void OnPlayerTriggerExit(VRCPlayerApi player)\n    {\n        if (!Utilities.IsValid(player) || !player.isLocal) return;\n        if (Time.time < _nextAllowed) return;\n        _nextAllowed = Time.time + debounce;\n        _inside = false;\n        Apply(false);\n    }\n\n    private void Apply(bool on)\n    {\n        if (targets == null) return;\n        var self = this.gameObject;\n        for (int i = 0; i < targets.Length; i++)\n        {\n            var go = targets[i];\n            if (!Utilities.IsValid(go) || go == self) continue;\n\n            switch (mode)\n            {\n                default: // SetActive\n                    go.SetActive(on);\n                    break;\n                case 1: // Renderers\n                    var rends = go.GetComponentsInChildren<Renderer>(true);\n                    for (int r=0;r<rends.Length;r++) if (Utilities.IsValid(rends[r])) rends[r].enabled = on;\n                    break;\n                case 2: // Lights\n                    var ls = go.GetComponentsInChildren<Light>(true);\n                    for (int l=0;l<ls.Length;l++) if (Utilities.IsValid(ls[l])) ls[l].enabled = on;\n                    break;\n                case 3: // Audio\n                    var auds = go.GetComponentsInChildren<AudioSource>(true);\n                    for (int a=0;a<auds.Length;a++) if (Utilities.IsValid(auds[a])) auds[a].enabled = on;\n                    break;\n                case 4: // Particles\n                    var ps = go.GetComponentsInChildren<ParticleSystem>(true);\n                    for (int p=0;p<ps.Length;p++)\n                    {\n                        var sys = ps[p]; if (!Utilities.IsValid(sys)) continue;\n                        if (on) sys.Play(true); else sys.Stop(true, ParticleSystemStopBehavior.StopEmittingAndClear);\n                    }\n                    break;\n            }\n        }\n    }\n}\n#else\n// UdonSharp not installed: leave file empty to avoid compile errors.\n#endif
#if UNITY_EDITOR\nusing System;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing UnityEditor;\n\nnamespace DemonShop.Editor\n{\n    /// <summary>\n    // NOTE: / 统一做第三方包的探测（MLP / VRCLightVolumes / UdonSharp）。 // translated\n    // NOTE: /* Block comment translated: - 在 delayCall 中做一次重型扫描，避免阻塞 OnGUI *// translated\n    // NOTE: / - 结果缓存；除非手动 Refresh，否则不再重复扫描 // translated\n    /// </summary>\n    public static class DP_PackageDetector\n    {\n        public static bool HasMLP            { get; private set; }\n        public static bool HasLV             { get; private set; }\n        public static bool HasLVManager      { get; private set; }\n        public static bool HasUdonSharp      { get; private set; }\n\n        public static bool IsScanning        { get; private set; }\n        public static DateTime LastScanTime  { get; private set; }\n\n        private static bool _initialized;\n\n        // NOTE: /* Block comment translated: <summary>在面板绘制前调用；仅第一次会触发一次异步扫描 */summary> // translated\n        public static void Ensure()\n        {\n            if (_initialized) return;\n            _initialized = true;\n            // NOTE: 先做一次“轻量快速判定”（不遍历所有类型） // translated\n            QuickProbe();\n            // NOTE: 再在下一帧做一次完整扫描，更新结果 // translated\n            EditorApplication.delayCall += FullScanSafe;\n        }\n\n        // NOTE: /* Block comment translated: <summary>手动刷新（按钮调用） */summary> // translated\n        public static void RefreshNow()\n        {\n            if (IsScanning) return;\n            FullScanSafe();\n        }\n\n        private static void QuickProbe()\n        {\n            // NOTE: 尝试用已知的全名（轻量）——找不到也没关系，FullScan 会兜底 // translated\n            HasUdonSharp = Type.GetType("UdonSharp.UdonSharpBehaviour, UdonSharp") != null\n                           || Type.GetType("UdonSharp.UdonSharpBehaviour") != null;\n\n            HasMLP       = Type.GetType("MagicLightProbes.MagicLightProbes") != null\n                           || Type.GetType("MagicLightProbes") != null;\n\n            HasLV        = Type.GetType("LightVolume") != null\n                           || Type.GetType("REDSIM.LightVolume") != null;\n\n            HasLVManager = Type.GetType("LightVolumesManager") != null\n                           || Type.GetType("REDSIM.LightVolumesManager") != null;\n        }\n\n        private static void FullScanSafe()\n        {\n            if (IsScanning) return;\n            IsScanning = true;\n\n            try\n            {\n                // NOTE: 遍历所有 Assembly → Types 一次；只做一次，结果缓存 // translated\n                bool mlp = false, lv = false, lvm = false, udon = false;\n\n                foreach (var asm in AppDomain.CurrentDomain.GetAssemblies())\n                {\n                    Type[] types;\n                    try { types = asm.GetTypes(); }\n                    catch (ReflectionTypeLoadException e) { types = e.Types; }\n                    if (types == null) continue;\n\n                    foreach (var t in types)\n                    {\n                        if (t == null) continue;\n                        var n = t.FullName ?? t.Name;\n                        // NOTE: 做尽量少的比较 // translated\n                        if (!mlp && (n.Contains("MagicLightProbes"))) mlp = true;\n                        if (!lv  && (n.EndsWith(".LightVolume") || n == "LightVolume")) lv = true;\n                        if (!lvm && (n.EndsWith(".LightVolumesManager") || n == "LightVolumesManager")) lvm = true;\n                        if (!udon && (n == "UdonSharp.UdonSharpBehaviour")) udon = true;\n\n                        if (mlp && lv && lvm && udon) break;\n                    }\n                    if (mlp && lv && lvm && udon) break;\n                }\n\n                HasMLP = mlp; HasLV = lv; HasLVManager = lvm; HasUdonSharp = udon;\n                LastScanTime = DateTime.Now;\n            }\n            finally\n            {\n                IsScanning = false;\n            }\n        }\n    }\n}\n#endif
#if UNITY_EDITOR\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing UnityEditor;\nusing UnityEngine;\n\nnamespace DemonShop.Editor\n{\n    public static class DP_Utils\n    {\n        // ===== Reflection helpers =====\n        public static Type GetTypeByName(string fullName)\n        {\n            foreach (var asm in AppDomain.CurrentDomain.GetAssemblies())\n            {\n                var t = asm.GetType(fullName);\n                if (t != null) return t;\n            }\n            return null;\n        }\n        public static Type FindTypeContains(string token)\n        {\n            token = token.ToLowerInvariant();\n            foreach (var asm in AppDomain.CurrentDomain.GetAssemblies())\n            foreach (var t in asm.GetTypes())\n                if (t.FullName != null && t.FullName.ToLowerInvariant().Contains(token)) return t;\n            return null;\n        }\n        public static void TrySet(object obj, string fieldOrProp, object value)\n        {\n            if (obj==null) return;\n            var tp = obj.GetType();\n            var f = tp.GetField(fieldOrProp, BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic);\n            if (f != null && IsAssignable(f.FieldType, value)){ f.SetValue(obj, value); return; }\n            var p = tp.GetProperty(fieldOrProp, BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic);\n            if (p != null && p.CanWrite && IsAssignable(p.PropertyType, value)){ p.SetValue(obj, value, null); return; }\n        }\n        private static bool IsAssignable(Type target, object value)\n        {\n            if (value == null) return !target.IsValueType || Nullable.GetUnderlyingType(target)!=null;\n            return target.IsAssignableFrom(value.GetType());\n        }\n\n        // ===== Geometry / Scene =====\n        public static int CountTriangles(Transform[] selection)\n        {\n            int tot = 0;\n            foreach (var t in selection) tot += SafeTriCount(t);\n            return tot;\n        }\n        public static int CountTriangles(GameObject[] roots)\n        {\n            int tot = 0;\n            foreach (var r in roots)\n                foreach (var t in r.GetComponentsInChildren<Transform>(true))\n                    tot += SafeTriCount(t);\n            return tot;\n        }\n        public static int SafeTriCount(Transform t)\n        {\n            if (!t) return 0;\n            var mf = t.GetComponent<MeshFilter>(); if (mf && mf.sharedMesh) return mf.sharedMesh.triangles.Length/3;\n            var sk = t.GetComponent<SkinnedMeshRenderer>(); if (sk && sk.sharedMesh) return sk.sharedMesh.triangles.Length/3;\n            return 0;\n        }\n\n        public static Bounds? CollectBounds(Transform[] ts, bool includeRenderers, bool includeColliders)\n        {\n            bool has=false; Bounds b=new Bounds();\n            foreach (var t in ts)\n            {\n                if (!t) continue;\n                if (includeRenderers)\n                    foreach (var r in t.GetComponentsInChildren<Renderer>(true))\n                    {\n                        if (!has){ b = r.bounds; has=true; } else b.Encapsulate(r.bounds);\n                    }\n                if (includeColliders)\n                    foreach (var c in t.GetComponentsInChildren<Collider>(true))\n                    {\n                        if (!has){ b = c.bounds; has=true; } else b.Encapsulate(c.bounds);\n                    }\n            }\n            return has? b : (Bounds?)null;\n        }\n\n        public static IEnumerable<GameObject> Unique(IEnumerable<GameObject> list) => list.Distinct();\n\n        // ===== GUI helpers =====\n        public static GUIStyle MidBold(Color c)\n        {\n            return new GUIStyle(EditorStyles.boldLabel){\n                fontSize = 14, alignment = TextAnchor.MiddleCenter, normal = { textColor = c }\n            };\n        }\n        public static void BigNumber(string text, Color c)\n        {\n            var st = new GUIStyle(EditorStyles.boldLabel){ fontSize=28, alignment=TextAnchor.MiddleCenter, normal={ textColor=c } };\n            GUILayout.Label(text, st);\n        }\n\n        // ===== Materials =====\n        public static void CopyAllTextureKeywords(Material src, Material dst)\n        {\n            foreach (var name in src.GetTexturePropertyNames())\n            {\n                if (dst.HasProperty(name)) dst.SetTexture(name, src.GetTexture(name));\n            }\n            dst.shaderKeywords = src.shaderKeywords;\n        }\n    }\n}\n#endif
#if UNITY_EDITOR\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEditor;\nusing UnityEngine;\n\nnamespace DemonShop.Editor\n{\n    public static class DP_LVAdvisor\n    {\n        private static bool _useSelectionBounds = true;\n        private static Vector3 _manualSize = new Vector3(20, 10, 20);\n        private static int _targetMaxCells = 200000;\n        private static int _bytesPerCell = 64;\n\n        private static float _voxelSize = 1f;\n        private static Vector3Int _resXYZ = new Vector3Int(1,1,1);\n        private static int _totalCells = 1;\n        private static float _memMB = 1f;\n        private static string _lastSuggestNote = "";\n\n        private static bool _fromLPG = true, _fromMLP = false;\n        private static bool _selOnly = true, _deleteSrc = false;\n        private static float _marginPct = 2f;\n\n        public static void DrawGUI()\n        {\n            DP_PackageDetector.Ensure();\n            var hasLV = DP_PackageDetector.HasLV;\n            var scanning = DP_PackageDetector.IsScanning;\n\n            EditorGUILayout.HelpBox(DP_Loc.T("lvIntro"), MessageType.None);\n\n            _useSelectionBounds = EditorGUILayout.ToggleLeft(DP_Loc.T("lvUseSel"), _useSelectionBounds);\n            using (new EditorGUI.DisabledScope(_useSelectionBounds))\n                _manualSize = EditorGUILayout.Vector3Field(DP_Loc.T("lvManual"), _manualSize);\n\n            _targetMaxCells = EditorGUILayout.IntField(DP_Loc.T("lvTargetCells"), Mathf.Max(1000, _targetMaxCells));\n            _bytesPerCell   = EditorGUILayout.IntField(DP_Loc.T("lvBytesPerCell"), Mathf.Clamp(_bytesPerCell, 16, 256));\n\n            if (GUILayout.Button(DP_Loc.T("lvSuggest"), GUILayout.Height(22)))\n                RunSuggest();\n\n            if (!string.IsNullOrEmpty(_lastSuggestNote))\n                EditorGUILayout.HelpBox(_lastSuggestNote, MessageType.Warning);\n\n            using (new EditorGUI.DisabledScope(true))\n            {\n                EditorGUILayout.FloatField(DP_Loc.T("lvResVoxel"), _voxelSize);\n                EditorGUILayout.Vector3IntField(DP_Loc.T("lvResReso"), _resXYZ);\n                EditorGUILayout.IntField(DP_Loc.T("lvResCells"), _totalCells);\n                EditorGUILayout.FloatField(DP_Loc.T("lvResMem"), _memMB);\n            }\n\n            EditorGUILayout.HelpBox(DP_Loc.T("lvNoteLimits"), MessageType.Info);\n\n            GUILayout.Space(4);\n            GUILayout.Label(DP_Loc.T("lvConvHeader"), EditorStyles.boldLabel);\n            _fromLPG = EditorGUILayout.ToggleLeft(DP_Loc.T("lvFromLPG"), _fromLPG);\n            _fromMLP = EditorGUILayout.ToggleLeft(DP_Loc.T("lvFromMLP"), _fromMLP);\n            _selOnly = EditorGUILayout.ToggleLeft(DP_Loc.T("lvSelOnly"), _selOnly);\n            _marginPct = EditorGUILayout.Slider(DP_Loc.T("lvMargin"), _marginPct, 0, 20);\n            _deleteSrc = EditorGUILayout.ToggleLeft(DP_Loc.T("lvDeleteSrc"), _deleteSrc);\n\n            using (new EditorGUI.DisabledScope(!_fromLPG && !_fromMLP))\n            {\n                if (GUILayout.Button(DP_Loc.T("lvRunConvert"), GUILayout.Height(22)))\n                    RunConvert(hasLV);\n            }\n\n            GUILayout.Space(4);\n            if (!hasLV) EditorGUILayout.HelpBox(DP_Loc.T("lvNeedLV"), MessageType.Info);\n            GUILayout.Label($"LV installed: {(hasLV? "Yes":"No")} {(scanning? "(scanning…)" : "")}", EditorStyles.miniLabel);\n        }\n\n        public static void DrawIntegrationTail()\n        {\n            GUILayout.Label($"LV detected: {(DP_PackageDetector.HasLV? "Yes":"No")}", EditorStyles.miniLabel);\n        }\n\n        private static void RunSuggest()\n        {\n            try\n            {\n                Bounds b;\n                if (_useSelectionBounds)\n                {\n                    // NOTE: 直接使用你已有的 CollectBounds // translated\n                    var trs = Selection.transforms;\n                    var bb = DP_Utils.CollectBounds(trs, includeRenderers:true, includeColliders:true);\n                    if (!bb.HasValue)\n                    {\n                        _lastSuggestNote = "⚠ No renderer/collider in selection. Switch to Manual or select objects.";\n                        return;\n                    }\n                    b = bb.Value;\n                }\n                else\n                {\n                    b = new Bounds(Vector3.zero, _manualSize);\n                }\n\n                var size = b.size;\n                var volume = Mathf.Max(0.001f, size.x * size.y * size.z);\n                _voxelSize = Mathf.Max(0.1f, Mathf.Pow(volume / Mathf.Max(1000, _targetMaxCells), 1f/3f));\n\n                _resXYZ = new Vector3Int(\n                    Mathf.Max(1, Mathf.RoundToInt(size.x / _voxelSize)),\n                    Mathf.Max(1, Mathf.RoundToInt(size.y / _voxelSize)),\n                    Mathf.Max(1, Mathf.RoundToInt(size.z / _voxelSize))\n                );\n                _totalCells = _resXYZ.x * _resXYZ.y * _resXYZ.z;\n                _memMB = (_totalCells * Mathf.Clamp(_bytesPerCell,16,256)) / (1024f*1024f);\n                _lastSuggestNote = "";\n            }\n            catch (System.SystemException e)\n            {\n                _lastSuggestNote = "Suggest failed: " + e.Message;\n            }\n        }\n\n        private static void RunConvert(bool hasLV)\n        {\n            try\n            {\n                if (!_fromLPG && !_fromMLP) return;\n                var margin = _marginPct / 100f;\n\n                var targets = new List<Component>();\n                if (_fromLPG)\n                    targets.AddRange(FindTargets("LightProbeGroup"));\n                if (_fromMLP)\n                    targets.AddRange(FindTargetsContains("MagicLightProbes"));\n\n                if (targets.Count == 0)\n                {\n                    EditorUtility.DisplayDialog("Convert", "No source (LPG/MLP) found.", DP_Loc.T("ok"));\n                    return;\n                }\n\n                if (hasLV)\n                {\n                    var mngTp = DP_Utils.GetTypeByName("LightVolumesManager") ?? DP_Utils.FindTypeContains("LightVolumesManager");\n                    if (mngTp != null && Object.FindObjectOfType(mngTp) == null)\n                    {\n                        var mgr = new GameObject("LightVolumesManager"); Undo.RegisterCreatedObjectUndo(mgr, "LV Manager");\n                        mgr.AddComponent(mngTp);\n                    }\n                }\n\n                Undo.IncrementCurrentGroup(); int ug = Undo.GetCurrentGroup();\n                int created = 0, deleted = 0;\n\n                foreach (var c in targets)\n                {\n                    if (_selOnly && !IsInSelection(c.gameObject)) continue;\n\n                    var b = BoundsFromComponent(c);\n                    if (!b.HasValue) continue;\n                    var bb = b.Value; bb.Expand(bb.size * margin);\n\n                    var parent = new GameObject("LV_From_" + c.GetType().Name);\n                    Undo.RegisterCreatedObjectUndo(parent, "Create LV group");\n                    parent.transform.position = bb.center;\n\n                    if (hasLV)\n                    {\n                        var volTp = DP_Utils.GetTypeByName("LightVolume") ?? DP_Utils.FindTypeContains("LightVolume");\n                        if (volTp != null)\n                        {\n                            var go = new GameObject("LightVolume");\n                            Undo.RegisterCreatedObjectUndo(go, "Create LV");\n                            go.transform.SetParent(parent.transform, false);\n                            go.transform.localScale = bb.size * 0.5f;\n                            go.AddComponent(volTp);\n                            created++;\n                        }\n                    }\n                    else\n                    {\n                        var go = new GameObject("LV_Placeholder");\n                        Undo.RegisterCreatedObjectUndo(go, "Create Placeholder");\n                        go.transform.SetParent(parent.transform, false);\n                        go.transform.localScale = bb.size * 0.5f;\n                        created++;\n                    }\n\n                    if (_deleteSrc)\n                        TryDeleteSource(c, ref deleted);\n                }\n\n                Undo.CollapseUndoOperations(ug);\n                EditorUtility.DisplayDialog("Convert", $"Created: {created}\nDeleted sources: {deleted}", DP_Loc.T("ok"));\n            }\n            catch (System.SystemException e)\n            {\n                EditorUtility.DisplayDialog("Convert", "Failed: " + e.Message, DP_Loc.T("ok"));\n            }\n        }\n\n        private static IEnumerable<Component> FindTargets(string exactType)\n        {\n            var tp = DP_Utils.GetTypeByName(exactType);\n            if (tp == null) yield break;\n            foreach (var c in Object.FindObjectsOfType(tp, true)) yield return (Component)c;\n        }\n        private static IEnumerable<Component> FindTargetsContains(string name)\n        {\n            var tp = DP_Utils.FindTypeContains(name);\n            if (tp == null) yield break;\n            foreach (var c in Object.FindObjectsOfType(tp, true)) yield return (Component)c;\n        }\n        private static bool IsInSelection(GameObject go)\n        {\n            if (Selection.transforms == null || Selection.transforms.Length == 0) return false;\n            foreach (var t in Selection.transforms) if (go.transform.IsChildOf(t)) return true;\n            return false;\n        }\n        private static Bounds? BoundsFromComponent(Component c)\n        {\n            if (!c) return null;\n            var tr = c.transform;\n            var rends = tr.GetComponentsInChildren<Renderer>(true);\n            if (rends != null && rends.Length > 0)\n            {\n                var b = rends[0].bounds;\n                for (int i=1;i<rends.Length;i++) b.Encapsulate(rends[i].bounds);\n                return b;\n            }\n            var cols = tr.GetComponentsInChildren<Collider>(true);\n            if (cols != null && cols.Length > 0)\n            {\n                var b = cols[0].bounds;\n                for (int i=1;i<cols.Length;i++) b.Encapsulate(cols[i].bounds);\n                return b;\n            }\n            return null;\n        }\n        private static void TryDeleteSource(Component c, ref int counter)\n        {\n            if (!c) return;\n            Undo.DestroyObjectImmediate(c.gameObject);\n            counter++;\n        }\n    }\n}\n#endif
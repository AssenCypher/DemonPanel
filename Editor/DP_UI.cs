#if UNITY_EDITOR\nusing System;\nusing UnityEditor;\nusing UnityEngine;\n\nnamespace DemonShop.Editor\n{\n    /// <summary>\n    // NOTE: / 极简 UI 工具： // translated\n    // NOTE: /* Block comment translated: 1) Auto(width): 轻量缩放，窗口很窄时整体按比例缩小（不放大）。 *// translated\n    // NOTE: / 2) Row(width): 自动换行的“按钮行”/* Block comment translated: 具条。按钮在变窄时会自动折到下一行。 *// translated\n    // NOTE: /    用法示例： // translated\n    ///    using (DP_UI.Auto(position.width)) {\n    ///        using (var row = DP_UI.Row(position.width).Gap(6).Pad(2)) {\n    ///            if (row.Button("Probes")) tab = 0;\n    ///            if (row.Button("VRCLV"))  tab = 1;\n    // NOTE: /* Block comment translated: if (row.Button("Bakery相关")) tab = 2; *// translated\n    ///        }\n    // NOTE: /        //* Block comment translated: 下面继续你原来的 UI ... *// translated\n    ///    }\n    /// </summary>\n    public static class DP_UI\n    {\n        // NOTE: ---------- 1) 轻量缩放 ---------- // translated\n        public static float BaseWidth = 560f; // NOTE: 参考布局宽度，可按视觉微调 // translated\n        public static float MinScale  = 0.70f;\n        public static float MaxScale  = 1.00f;\n\n        static float CalcScale(float w)\n        {\n            if (w <= 1f) return 1f;\n            float s = w / Mathf.Max(1f, BaseWidth);\n            if (s > MaxScale) s = MaxScale;\n            if (s < MinScale) s = MinScale;\n            return s;\n        }\n\n        public sealed class Scope : IDisposable\n        {\n            readonly Matrix4x4 _old;\n            readonly float _oldLabel;\n            public readonly float Scale;\n            public readonly float ContentWidth;\n\n            internal Scope(float windowWidth)\n            {\n                Scale = CalcScale(windowWidth);\n                _old = GUI.matrix;\n                _oldLabel = EditorGUIUtility.labelWidth;\n\n                GUI.matrix = Matrix4x4.TRS(Vector3.zero, Quaternion.identity, new Vector3(Scale, Scale, 1f));\n                ContentWidth = windowWidth / Mathf.Max(Scale, 1e-6f);\n                EditorGUIUtility.labelWidth = Mathf.Clamp(ContentWidth * 0.42f, 80f, 240f);\n            }\n\n            public void Dispose()\n            {\n                GUI.matrix = _old;\n                EditorGUIUtility.labelWidth = _oldLabel;\n            }\n        }\n\n        public static Scope Auto(float windowWidth) => new Scope(windowWidth);\n\n        // NOTE: ---------- 2) 自动换行的“响应式行” ---------- // translated\n        public sealed class ResponsiveRow : IDisposable\n        {\n            readonly float _contentWidth;\n            float _x;\n            float _gap = 6f;\n            float _pad = 2f;\n            bool _rowOpen;\n\n            GUIStyle _btnStyle;\n            GUIStyle _miniBtnStyle;\n\n            internal ResponsiveRow(float contentWidth)\n            {\n                _contentWidth = Mathf.Max(0f, contentWidth);\n                _btnStyle = new GUIStyle(GUI.skin.button);\n                _miniBtnStyle = new GUIStyle(EditorStyles.miniButton);\n                BeginRow();\n            }\n\n            public ResponsiveRow Gap(float gap) { _gap = Mathf.Max(0, gap); return this; }\n            public ResponsiveRow Pad(float pad) { _pad = Mathf.Max(0, pad); return this; }\n\n            void BeginRow()\n            {\n                if (_rowOpen) return;\n                EditorGUILayout.BeginHorizontal();\n                GUILayout.Space(_pad);\n                _x = _pad;\n                _rowOpen = true;\n            }\n\n            void EndRowInternal()\n            {\n                if (!_rowOpen) return;\n                GUILayout.FlexibleSpace();\n                GUILayout.Space(_pad);\n                EditorGUILayout.EndHorizontal();\n                _rowOpen = false;\n            }\n\n            // NOTE: /* Block comment translated: <summary>结束当前行；IDisposable 自动调用。 */summary> // translated\n            public void NewRow()\n            {\n                EndRowInternal();\n                BeginRow();\n            }\n\n            public void Dispose()\n            {\n                EndRowInternal();\n            }\n\n            // NOTE: ---- 计算按钮宽度（含 style）---- // translated\n            float CalcButtonWidth(GUIContent gc, GUIStyle style)\n            {\n                Vector2 sz = style.CalcSize(gc);\n                // NOTE: CalcSize 在 IMGUI 会有最小宽度；这里再加一点边距更稳妥 // translated\n                return Mathf.Ceil(sz.x + 4f);\n            }\n\n            // NOTE: ---- 当剩余空间不足时，自动换行 ---- // translated\n            void EnsureSpaceFor(float widthNeeded)\n            {\n                // NOTE: 可用空间（扣掉右侧内边距 _pad） // translated\n                float available = Mathf.Max(0f, _contentWidth - _x - _pad);\n                if (widthNeeded > available)\n                {\n                    NewRow();\n                }\n                else if (_x > _pad) // NOTE: 行内非第一个，给个间距 // translated\n                {\n                    GUILayout.Space(_gap);\n                    _x += _gap;\n                }\n            }\n\n            // Convenience API: these helpers auto-wrap for you.\n            public bool Button(string text) => Button(new GUIContent(text), _btnStyle);\n            public bool MiniButton(string text) => Button(new GUIContent(text), _miniBtnStyle);\n\n            public bool Button(GUIContent gc, GUIStyle style)\n            {\n                float w = CalcButtonWidth(gc, style);\n                EnsureSpaceFor(w);\n                bool clicked = GUILayout.Button(gc, style, GUILayout.Width(w));\n                _x += w;\n                return clicked;\n            }\n\n            // NOTE: 也可以塞自定义控件：传入需要的像素宽度，Row 会帮你换行与占位 // translated\n            public void Custom(float pixelWidth, Action draw)\n            {\n                pixelWidth = Mathf.Max(0f, pixelWidth);\n                EnsureSpaceFor(pixelWidth);\n                draw?.Invoke();\n                _x += pixelWidth;\n            }\n        }\n\n        // NOTE: /* Block comment translated: <summary>创建一行“可自动换行”的工具条。传 position.width 或 Auto(..).ContentWidth。 */summary> // translated\n        public static ResponsiveRow Row(float windowWidthOrContentWidth) =>\n            new ResponsiveRow(windowWidthOrContentWidth);\n    }\n}\n#endif
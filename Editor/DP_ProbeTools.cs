#if UNITY_EDITOR\nusing System.Collections.Generic;\nusing UnityEditor;\nusing UnityEditor.PackageManager;\nusing UnityEngine;\n\nnamespace DemonShop.Editor\n{\n    public static class DP_ProbeTools\n    {\n        private static float _expand = 0.02f;\n        private static bool _makeLPG = true, _makeReflection = true, _makeMLP = false, _makeLV = false;\n        private static float _grid = 2.0f;\n\n        private static bool _makeAreaTrigger = false;\n        private static bool _attachUdonToggle = false;\n        private static bool _targetsFromSelectedParent = true;\n        private static int  _toggleMode = 0;\n\n        private static bool _hasMLP, _hasLV, _hasLVManager, _hasUdonSharp;\n        private static double _nextCopyTime;\n\n        // NOTE: --- 小工具：首行提示 + 刷新按钮，窄时自动“换到下一行” --- // translated\n        private static void DrawIntroWithRefresh()\n        {\n            const float kButtonWidth = 80f;\n            float width = EditorGUIUtility.currentViewWidth; // NOTE: 当前可用宽度 // translated\n\n            // NOTE: 估个阈值：够宽时并排，不够宽时分两行 // translated\n            bool narrow = width < 520f;\n\n            if (!narrow)\n            {\n                using (new EditorGUILayout.HorizontalScope())\n                {\n                    EditorGUILayout.HelpBox(DP_Loc.T("probeIntro"), MessageType.None);\n                    GUILayout.FlexibleSpace();\n                    using (new EditorGUI.DisabledScope(DP_PackageDetector.IsScanning))\n                    {\n                        if (GUILayout.Button(DP_Loc.T("refresh"), GUILayout.Width(kButtonWidth)))\n                            DP_PackageDetector.RefreshNow();\n                    }\n                }\n            }\n            else\n            {\n                // NOTE: 第一行：提示 // translated\n                EditorGUILayout.HelpBox(DP_Loc.T("probeIntro"), MessageType.None);\n                // NOTE: 第二行：刷新按钮 // translated\n                using (new EditorGUI.DisabledScope(DP_PackageDetector.IsScanning))\n                {\n                    using (new EditorGUILayout.HorizontalScope())\n                    {\n                        GUILayout.FlexibleSpace();\n                        if (GUILayout.Button(DP_Loc.T("refresh"), GUILayout.Width(kButtonWidth)))\n                            DP_PackageDetector.RefreshNow();\n                    }\n                }\n            }\n        }\n\n        public static void DrawGUI()\n        {\n            DP_PackageDetector.Ensure();\n\n            if (EditorApplication.timeSinceStartup > _nextCopyTime)\n            {\n                _nextCopyTime = EditorApplication.timeSinceStartup + 0.5f;\n                _hasMLP       = DP_PackageDetector.HasMLP;\n                _hasLV        = DP_PackageDetector.HasLV;\n                _hasLVManager = DP_PackageDetector.HasLVManager;\n                _hasUdonSharp = DP_PackageDetector.HasUdonSharp;\n            }\n\n            // NOTE: 顶部介绍 + 刷新（支持窄屏换行） // translated\n            DrawIntroWithRefresh();\n\n            EditorGUILayout.LabelField(\n                $"{DP_Loc.T("stateMLP")}{(_hasMLP? "Yes":"No")}   {DP_Loc.T("stateLV")}{(_hasLV? "Yes":"No")}   {DP_Loc.T("stateUdon")}{(_hasUdonSharp? "Yes":"No")}" +\n                $"{(DP_PackageDetector.IsScanning ? "   (scanning…)" : "")}",\n                EditorStyles.miniLabel);\n\n            _expand = EditorGUILayout.Slider(DP_Loc.T("boundsExpand"), _expand*100f, 0, 20)/100f;\n            _grid   = Mathf.Max(0.25f, EditorGUILayout.FloatField(DP_Loc.T("gridStep"), _grid));\n\n            _makeLPG        = EditorGUILayout.ToggleLeft(DP_Loc.T("createLPG"), _makeLPG);\n            _makeReflection = EditorGUILayout.ToggleLeft(DP_Loc.T("createRefProbe"), _makeReflection);\n\n            using (new EditorGUI.DisabledScope(!_hasMLP))\n                _makeMLP = EditorGUILayout.ToggleLeft($"{DP_Loc.T("addMLP")} {(_hasMLP? "(detected)":"(not installed)")}", _makeMLP);\n            using (new EditorGUI.DisabledScope(!_hasLV))\n                _makeLV  = EditorGUILayout.ToggleLeft($"{DP_Loc.T("addLV")} {(_hasLV? "(detected)":"(installable)")}", _makeLV);\n\n            _makeAreaTrigger   = EditorGUILayout.ToggleLeft(DP_Loc.T("createArea"), _makeAreaTrigger);\n            using (new EditorGUI.DisabledScope(!_hasUdonSharp))\n            {\n                _attachUdonToggle = EditorGUILayout.ToggleLeft($"{DP_Loc.T("attachUdon")} {(_hasUdonSharp? "(UdonSharp detected)":"(install UdonSharp to enable)")}", _attachUdonToggle);\n                if (_attachUdonToggle)\n                {\n                    _targetsFromSelectedParent = EditorGUILayout.ToggleLeft(DP_Loc.T("targetsChildren"), _targetsFromSelectedParent);\n                    _toggleMode = EditorGUILayout.Popup(DP_Loc.T("toggleMode"), _toggleMode,\n                        new[]{"SetActive(GameObject)","Renderers.enabled","Light.enabled","AudioSource.enabled","ParticleSystem.Play/Stop"});\n                }\n            }\n\n            if (GUILayout.Button(DP_Loc.T("generate"), GUILayout.Height(26)))\n                GenerateForSelection();\n\n            // NOTE: —— 按你的要求：从 Probes 页移除 VRCLV 安装入口（保持页面纯净）—— // translated\n            // NOTE: （原来这里有一个 using (new EditorGUI.DisabledScope(_hasLV)) { Install LV } 的块，已删除） // translated\n        }\n\n        public static void DrawIntegrationBlock()\n        {\n            GUILayout.Label(DP_Loc.T("detected"), EditorStyles.boldLabel);\n            EditorGUILayout.LabelField($"• Bakery: {(DP_BakeryTools.Installed? "Yes":"No")}");\n            EditorGUILayout.LabelField($"• Magic Light Probes: {(_hasMLP? "Yes":"No")}");\n            EditorGUILayout.LabelField($"• VRCLightVolumes: {(_hasLV? "Yes":"No")}");\n            if (_hasLV) EditorGUILayout.LabelField($"  (Manager present: {(_hasLVManager? "Yes":"No")})");\n            EditorGUILayout.LabelField($"• UdonSharp: {(_hasUdonSharp? "Yes":"No")}");\n        }\n\n        private static void GenerateForSelection()\n        {\n            var trs = Selection.transforms;\n            if (trs == null || trs.Length == 0){ EditorUtility.DisplayDialog("No Selection","Select one or more objects.", DP_Loc.T("ok")); return; }\n\n            var b = DP_Utils.CollectBounds(trs, includeRenderers:true, includeColliders:true);\n            if (!b.HasValue){ EditorUtility.DisplayDialog("No Bounds","No renderer/collider found in selection.", DP_Loc.T("ok")); return; }\n            var bounds = b.Value; bounds.Expand(bounds.size * _expand);\n\n            Undo.IncrementCurrentGroup(); int ug = Undo.GetCurrentGroup();\n            var root = new GameObject("__DemonPanel_Probes"); Undo.RegisterCreatedObjectUndo(root,"Create Probe Root");\n            root.transform.position = bounds.center;\n\n            if (_makeReflection) CreateReflectionProbe(root.transform, bounds);\n            if (_makeLPG)        CreateLightProbeGroup(root.transform, bounds, _grid);\n            if (_makeMLP && _hasMLP) TryCreateMLPVolume(root.transform, bounds);\n            if (_makeLV  && _hasLV)  TryCreateLightVolume(root.transform, bounds);\n\n            if (_makeAreaTrigger)\n            {\n                var area = new GameObject("Auto Area Trigger");\n                Undo.RegisterCreatedObjectUndo(area,"Create Area Trigger");\n                area.transform.SetParent(root.transform, false);\n                area.transform.localPosition = Vector3.zero;\n\n                var bc = area.AddComponent<BoxCollider>();\n                bc.isTrigger = true; bc.center = Vector3.zero; bc.size = bounds.size;\n\n                var rb = area.AddComponent<Rigidbody>();\n                rb.isKinematic = true; rb.useGravity = false;\n\n                if (_attachUdonToggle && _hasUdonSharp)\n                    TryAttachUdonToggle(area, trs, useParent: _targetsFromSelectedParent, toggleMode: _toggleMode);\n            }\n\n            Undo.CollapseUndoOperations(ug);\n            Selection.activeGameObject = root;\n            EditorGUIUtility.PingObject(root);\n        }\n\n        private static void CreateReflectionProbe(Transform parent, Bounds b)\n        {\n            var go = new GameObject("Auto Reflection Probe"); Undo.RegisterCreatedObjectUndo(go,"ReflectionProbe");\n            go.transform.SetParent(parent,false);\n            var rp = go.AddComponent<ReflectionProbe>();\n            rp.mode = UnityEngine.Rendering.ReflectionProbeMode.Baked;\n            rp.boxProjection = true;\n            rp.center = Vector3.zero;\n            rp.size = b.size;\n        }\n\n        private static void CreateLightProbeGroup(Transform parent, Bounds b, float step)\n        {\n            var go = new GameObject("Auto LightProbeGroup"); Undo.RegisterCreatedObjectUndo(go,"LightProbeGroup");\n            go.transform.SetParent(parent,false);\n            var lpg = go.AddComponent<LightProbeGroup>();\n            var pts = new List<Vector3>();\n            var min = b.min - parent.position; var max = b.max - parent.position;\n\n            for (float x=min.x; x<=max.x; x+=step)\n            for (float y=min.y; y<=max.y; y+=step)\n            for (float z=min.z; z<=max.z; z+=step)\n                pts.Add(new Vector3(x,y,z));\n            lpg.probePositions = pts.ToArray();\n        }\n\n        private static void TryCreateMLPVolume(Transform parent, Bounds b)\n        {\n            var tp = DP_Utils.FindTypeContains("MagicLightProbes");\n            if (tp == null){ Debug.LogWarning("[DemonPanel] MLP type not found."); return; }\n            var go = new GameObject("MLP_Volume"); Undo.RegisterCreatedObjectUndo(go,"MLP Volume");\n            go.transform.SetParent(parent,false); go.transform.localPosition = Vector3.zero;\n            go.transform.localScale = b.size;\n            go.AddComponent(tp);\n        }\n\n        private static void TryCreateLightVolume(Transform parent, Bounds b)\n        {\n            var mngTp = DP_Utils.GetTypeByName("LightVolumesManager") ?? DP_Utils.FindTypeContains("LightVolumesManager");\n            if (mngTp != null && GameObject.FindObjectOfType(mngTp) == null)\n            {\n                var mgr = new GameObject("LightVolumesManager"); Undo.RegisterCreatedObjectUndo(mgr, "LV Manager");\n                mgr.AddComponent(mngTp);\n            }\n\n            var volTp = DP_Utils.GetTypeByName("LightVolume") ?? DP_Utils.FindTypeContains("LightVolume");\n            if (volTp == null){ Debug.LogWarning("[DemonPanel] LightVolume type not found."); return; }\n\n            var go = new GameObject("LightVolume"); Undo.RegisterCreatedObjectUndo(go,"LightVolume");\n            go.transform.SetParent(parent,false);\n            go.transform.localPosition = Vector3.zero;\n            go.transform.localScale = b.size * 0.5f;\n            go.AddComponent(volTp);\n        }\n\n        private static void TryAttachUdonToggle(GameObject areaTrigger, Transform[] selection, bool useParent, int toggleMode)\n        {\n            var tp = DP_Utils.GetTypeByName("AreaRuntimeToggle");\n            if (tp == null) { Debug.LogWarning("[DemonPanel] AreaRuntimeToggle script not found (Udon/AreaRuntimeToggle.cs)."); return; }\n            var comp = areaTrigger.AddComponent(tp);\n\n            var targets = new List<GameObject>();\n            if (useParent && selection != null && selection.Length >= 1)\n            {\n                var root = selection[0];\n                foreach (var t in root.GetComponentsInChildren<Transform>(true))\n                {\n                    if (!t || t.gameObject == areaTrigger) continue;\n                    targets.Add(t.gameObject);\n                }\n            }\n            else\n            {\n                foreach (var r in Object.FindObjectsOfType<Renderer>(true))\n                {\n                    if (!r) continue;\n                    if (r.transform.IsChildOf(areaTrigger.transform)) continue;\n                    targets.Add(r.gameObject);\n                }\n            }\n\n            DP_Utils.TrySet(comp, "targets", targets.ToArray());\n            DP_Utils.TrySet(comp, "startDisabled", true);\n            DP_Utils.TrySet(comp, "mode", toggleMode);\n            DP_Utils.TrySet(comp, "debounce", 0.1f);\n        }\n    }\n}\n#endif
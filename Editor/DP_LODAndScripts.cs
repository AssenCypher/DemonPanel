#if UNITY_EDITOR\nusing System.Collections.Generic;\nusing UnityEditor;\nusing UnityEngine;\n\nnamespace DemonShop.Editor\n{\n    public static class DP_LODAndScripts\n    {\n        public static void DrawGUI()\n        {\n            var root = Selection.activeTransform ? Selection.activeTransform.root : null;\n            EditorGUILayout.LabelField($"{DP_Loc.T("selRoot")}: {(root?root.name:"—")}");\n\n            if (GUILayout.Button(DP_Loc.T("rmLodKeepHigh"), GUILayout.Height(22)))\n                RemoveLODGroupsKeepHighest(root);\n\n            GUILayout.Space(4);\n            EditorGUILayout.BeginHorizontal();\n            if (GUILayout.Button(DP_Loc.T("countCols"))) CountColliders(root);\n            if (GUILayout.Button(DP_Loc.T("rmAllCols"))) RemoveAllColliders(root);\n            EditorGUILayout.EndHorizontal();\n\n            EditorGUILayout.BeginHorizontal();\n            if (GUILayout.Button(DP_Loc.T("addMeshColNon"))) AddMeshColliders(root, false);\n            if (GUILayout.Button(DP_Loc.T("addMeshColConv"))) AddMeshColliders(root, true);\n            if (GUILayout.Button(DP_Loc.T("addBoxCol"))) AddBoxColliders(root);\n            EditorGUILayout.EndHorizontal();\n\n            GUILayout.Space(4);\n            EditorGUILayout.BeginHorizontal();\n            if (GUILayout.Button(DP_Loc.T("rmAllCS"))) RemoveAllCScripts(root);\n            if (GUILayout.Button(DP_Loc.T("rmMissing"))) RemoveMissingScripts(root);\n            EditorGUILayout.EndHorizontal();\n        }\n\n        private static IEnumerable<Transform> EnumTargets(Transform root)\n        {\n            if (root) foreach (var t in root.GetComponentsInChildren<Transform>(true)) yield return t;\n            else foreach (var t in Object.FindObjectsOfType<Transform>(true)) yield return t;\n        }\n\n        private static void RemoveLODGroupsKeepHighest(Transform root)\n        {\n            int removed=0, kept=0;\n            Undo.IncrementCurrentGroup(); int ug = Undo.GetCurrentGroup();\n            foreach (var t in EnumTargets(root))\n            {\n                var lod = t.GetComponent<LODGroup>(); if (!lod) continue;\n                Undo.RecordObject(lod, "Remove LODGroup");\n                // NOTE: 保留最高精度：LOD0；若有多个子，则启用 LOD0 并禁用其他 // translated\n                var lods = lod.GetLODs();\n                if (lods != null && lods.Length > 0)\n                {\n                    foreach (var r in lods[0].renderers) if (r) r.enabled = true;\n                    for (int i=1;i<lods.Length;i++)\n                        foreach (var r in lods[i].renderers) if (r) if (r) r.enabled = false;\n                }\n                Object.DestroyImmediate(lod);\n                removed++; kept++;\n            }\n            Undo.CollapseUndoOperations(ug);\n            EditorUtility.DisplayDialog("LOD", $"Removed LODGroups: {removed}\nKept highest-poly renderers: {kept}", DP_Loc.T("ok"));\n        }\n\n        private static void CountColliders(Transform root)\n        {\n            int n=0;\n            foreach (var t in EnumTargets(root)) if (t.GetComponent<Collider>()) n++;\n            EditorUtility.DisplayDialog("Colliders", $"Objects with Collider: {n}", DP_Loc.T("ok"));\n        }\n        private static void RemoveAllColliders(Transform root)\n        {\n            int n=0;\n            Undo.IncrementCurrentGroup(); int ug = Undo.GetCurrentGroup();\n            foreach (var t in EnumTargets(root))\n            {\n                foreach (var c in t.GetComponents<Collider>()){ Undo.DestroyObjectImmediate(c); n++; }\n            }\n            Undo.CollapseUndoOperations(ug);\n            EditorUtility.DisplayDialog("Colliders", $"Removed Colliders: {n}", DP_Loc.T("ok"));\n        }\n        private static void AddMeshColliders(Transform root, bool convex)\n        {\n            int n=0;\n            Undo.IncrementCurrentGroup(); int ug = Undo.GetCurrentGroup();\n            foreach (var t in EnumTargets(root))\n            {\n                var r = t.GetComponent<MeshRenderer>();\n                var f = t.GetComponent<MeshFilter>();\n                if (r && f && f.sharedMesh && !t.GetComponent<Collider>())\n                {\n                    var mc = Undo.AddComponent<MeshCollider>(t.gameObject);\n                    mc.sharedMesh = f.sharedMesh; mc.convex = convex;\n                    n++;\n                }\n            }\n            Undo.CollapseUndoOperations(ug);\n            EditorUtility.DisplayDialog("Colliders", $"Added MeshCollider ({(convex?"convex":"non-convex")}): {n}", DP_Loc.T("ok"));\n        }\n        private static void AddBoxColliders(Transform root)\n        {\n            int n=0;\n            Undo.IncrementCurrentGroup(); int ug = Undo.GetCurrentGroup();\n            foreach (var t in EnumTargets(root))\n            {\n                var r = t.GetComponent<Renderer>();\n                if (r && !t.GetComponent<Collider>())\n                {\n                    var bc = Undo.AddComponent<BoxCollider>(t.gameObject);\n                    bc.center = r.bounds.center - t.position;\n                    bc.size   = r.bounds.size;\n                    n++;\n                }\n            }\n            Undo.CollapseUndoOperations(ug);\n            EditorUtility.DisplayDialog("Colliders", $"Added BoxCollider: {n}", DP_Loc.T("ok"));\n        }\n\n        private static void RemoveAllCScripts(Transform root)\n        {\n            int n=0;\n            Undo.IncrementCurrentGroup(); int ug = Undo.GetCurrentGroup();\n            foreach (var t in EnumTargets(root))\n            {\n                var mbs = t.GetComponents<MonoBehaviour>();\n                foreach (var mb in mbs){ if (!mb) continue; Undo.DestroyObjectImmediate(mb); n++; }\n            }\n            Undo.CollapseUndoOperations(ug);\n            EditorUtility.DisplayDialog("Scripts", $"Removed MonoBehaviours: {n}", DP_Loc.T("ok"));\n        }\n        private static void RemoveMissingScripts(Transform root)\n        {\n            int n=0;\n            Undo.IncrementCurrentGroup(); int ug = Undo.GetCurrentGroup();\n            foreach (var t in EnumTargets(root))\n            {\n                n += GameObjectUtility.RemoveMonoBehavioursWithMissingScript(t.gameObject);\n            }\n            Undo.CollapseUndoOperations(ug);\n            EditorUtility.DisplayDialog("Scripts", $"Removed Missing Scripts: {n}", DP_Loc.T("ok"));\n        }\n    }\n}\n#endif
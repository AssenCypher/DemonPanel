#if UNITY_EDITOR\nusing System.Collections.Generic;\nusing UnityEditor;\nusing UnityEngine;\n\nnamespace DemonShop.Editor\n{\n    public static class DP_OcclusionRooms\n    {\n        private static bool _selOnly = false;\n        private static float _voxel = 2f;\n\n        public static void DrawGUI()\n        {\n            _selOnly = EditorGUILayout.ToggleLeft(DP_Loc.T("selOnly"), _selOnly);\n            _voxel   = EditorGUILayout.Slider(DP_Loc.T("voxelSize"), _voxel, 0.5f, 5f);\n\n            if (GUILayout.Button(DP_Loc.T("genRooms"), GUILayout.Height(22)))\n                GenerateRooms();\n        }\n\n        private static void GenerateRooms()\n        {\n            var roots = new List<Transform>();\n            if (_selOnly && Selection.transforms != null && Selection.transforms.Length > 0)\n                roots.AddRange(Selection.transforms);\n            else\n                foreach (var go in UnityEngine.SceneManagement.SceneManager.GetActiveScene().GetRootGameObjects())\n                    roots.Add(go.transform);\n\n            var b = DP_Utils.CollectBounds(roots.ToArray(), true, true);\n            if (!b.HasValue){ EditorUtility.DisplayDialog("No Bounds", "Cannot determine scene/selection bounds.", DP_Loc.T("ok")); return; }\n\n            var bounds = b.Value;\n            var min = bounds.min; var max = bounds.max;\n            var step = Mathf.Max(0.25f, _voxel);\n\n            Undo.IncrementCurrentGroup(); int ug = Undo.GetCurrentGroup();\n            var parent = new GameObject("__OcclusionRooms"); Undo.RegisterCreatedObjectUndo(parent,"Rooms Root");\n            parent.transform.position = bounds.center;\n\n            int created = 0; bool cancel=false; int xi=0, xcount=Mathf.CeilToInt((max.x-min.x)/step);\n            for (float x=min.x; x<=max.x && !cancel; x+=step, xi++)\n            {\n                int yi=0, ycount=Mathf.CeilToInt((max.y-min.y)/step);\n                for (float y=min.y; y<=max.y && !cancel; y+=step, yi++)\n                {\n                    int zi=0, zcount=Mathf.CeilToInt((max.z-min.z)/step);\n                    for (float z=min.z; z<=max.z && !cancel; z+=step, zi++)\n                    {\n                        float p = (xi/(float)xcount + yi/(float)(ycount+1) + zi/(float)(zcount+1))/3f;\n                        cancel = EditorUtility.DisplayCancelableProgressBar("Voxelizing Rooms", $"{xi}/{xcount}", p);\n\n                        var cell = new Bounds(new Vector3(x+step*0.5f, y+step*0.5f, z+step*0.5f), Vector3.one*step);\n                        //* Block comment translated: NOTE: 粗糙：若此体素完全在静态几何“外部”，认为是“空空间”（这里简单采用 Physics 重叠测试近似） *// translated\n                        var colliders = Physics.OverlapBox(cell.center, cell.extents*0.49f, Quaternion.identity, ~0, QueryTriggerInteraction.Ignore);\n                        if (colliders != null && colliders.Length > 0) continue; //* Block comment translated: NOTE: 非空空间，跳过 *// translated\n\n                        var room = new GameObject($"Room_{created:0000}");\n                        Undo.RegisterCreatedObjectUndo(room,"Create Room");\n                        room.transform.SetParent(parent.transform, false);\n                        var oa = room.AddComponent<OcclusionArea>();\n                        oa.center = cell.center - parent.transform.position; //* Block comment translated: NOTE: 本地 *// translated\n                        oa.size   = cell.size;\n                        created++;\n                    }\n                }\n            }\n            EditorUtility.ClearProgressBar();\n            Undo.CollapseUndoOperations(ug);\n            EditorUtility.DisplayDialog("Rooms", $"Created rooms: {created}", DP_Loc.T("ok"));\n        }\n    }\n}\n#endif
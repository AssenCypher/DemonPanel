#if UNITY_EDITOR\nusing System.Collections.Generic;\nusing UnityEditor;\nusing UnityEngine;\n\nnamespace DemonShop.Editor\n{\n    public static class DP_ShaderTools\n    {\n        private enum Scope { Scene, Selection, Both }\n        private static Scope _scope = Scope.Both;\n        private static Shader _target;\n        private static bool _dryRun = true;\n\n        private static readonly List<Material> _cachedStd = new List<Material>();\n        private static bool _scanned;\n\n        public static void Init(){}\n\n        public static void DrawGUI()\n        {\n            // NOTE: 范围 // translated\n            EditorGUILayout.BeginHorizontal();\n            GUILayout.Label(DP_Loc.T("scope") + ":", GUILayout.Width(60));\n            _scope = (Scope)EditorGUILayout.Popup((int)_scope,\n                new[]{ DP_Loc.T("scopeScene"), DP_Loc.T("scopeSelection"), DP_Loc.T("scopeBoth") },\n                GUILayout.Width(160));\n            EditorGUILayout.EndHorizontal();\n\n            // Target shader (drag & drop allowed).\n            _target = (Shader)EditorGUILayout.ObjectField(DP_Loc.T("targetShader"), _target, typeof(Shader), false);\n\n            if (GUILayout.Button(DP_Loc.T("scanStd")))\n            {\n                ScanStandard();\n            }\n            if (!_scanned || _cachedStd.Count == 0)\n                EditorGUILayout.HelpBox(DP_Loc.T("noStd"), MessageType.Info);\n\n            // Dry-run preview + Apply.\n            using (new EditorGUILayout.HorizontalScope())\n            {\n                EditorGUILayout.LabelField($"{DP_Loc.T("replaceTo")} {( _target ? _target.name : "None")}");\n                _dryRun = EditorGUILayout.ToggleLeft(DP_Loc.T("dryRun"), _dryRun, GUILayout.Width(160));\n            }\n            if (GUILayout.Button(DP_Loc.T("apply"), GUILayout.Height(22)))\n            {\n                if (_target == null) { EditorUtility.DisplayDialog("Shader", "Please select a target shader.", DP_Loc.T("ok")); return; }\n                ReplaceToTarget(_dryRun);\n            }\n        }\n\n        private static IEnumerable<Renderer> EnumRenderersByScope()\n        {\n            bool sel = _scope == Scope.Selection || _scope == Scope.Both;\n            bool scn = _scope == Scope.Scene     || _scope == Scope.Both;\n\n            if (sel && Selection.transforms != null && Selection.transforms.Length > 0)\n            {\n                var set = new HashSet<GameObject>();\n                foreach (var t in Selection.transforms)\n                    foreach (var c in t.GetComponentsInChildren<Transform>(true))\n                        set.Add(c.gameObject);\n\n                foreach (var r in Object.FindObjectsOfType<Renderer>(true))\n                    if (set.Contains(r.gameObject)) yield return r;\n            }\n\n            if (scn)\n            {\n                foreach (var r in Object.FindObjectsOfType<Renderer>(true))\n                    yield return r;\n            }\n        }\n\n        private static void ScanStandard()\n        {\n            _cachedStd.Clear(); _scanned = true;\n            foreach (var r in EnumRenderersByScope())\n            {\n                var mats = r.sharedMaterials;\n                foreach (var m in mats)\n                    if (m && m.shader && m.shader.name == "Standard" && !_cachedStd.Contains(m))\n                        _cachedStd.Add(m);\n            }\n            EditorUtility.DisplayDialog("Scan", $"Found {_cachedStd.Count} Standard materials.", DP_Loc.T("ok"));\n        }\n\n        private static void ReplaceToTarget(bool dryRun)\n        {\n            int changed = 0, total = 0;\n\n            Undo.IncrementCurrentGroup(); int ug = Undo.GetCurrentGroup();\n            foreach (var mat in _cachedStd)\n            {\n                total++;\n                if (!mat) continue;\n\n                if (!dryRun)\n                {\n                    Undo.RecordObject(mat, "Replace Shader");\n                    var old = mat.shader;\n                    mat.shader = _target;\n\n                    // Auto-map common property names.\n                    CopyIfExists(mat, old, "_Color");\n                    CopyIfExists(mat, old, "_MainTex");\n                    CopyIfExists(mat, old, "_Metallic");\n                    CopyIfExists(mat, old, "_Glossiness");\n                }\n                changed++;\n            }\n            if (!dryRun) Undo.CollapseUndoOperations(ug);\n\n            var msg = dryRun\n                ? $"[Dry Run] Would change: {changed} / {total}"\n                : $"Replaced: {changed} / {total}  {DP_Loc.T("mapped")}";\n            EditorUtility.DisplayDialog("Replace", msg, DP_Loc.T("ok"));\n        }\n\n        private static void CopyIfExists(Material mat, Shader from, string name)\n        {\n            if (from == null || mat.shader == null) return;\n            int id = Shader.PropertyToID(name);\n            if (mat.HasProperty(id))\n            {\n                // NOTE: 尝试从同名属性读取（简化处理） // translated\n                if (mat.HasProperty(name)) { /* Block comment translated: 同名时已存在 */ }\n            }\n        }\n    }\n}\n#endif